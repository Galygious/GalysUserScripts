// ==UserScript==
// @name         Assign Photographer Button
// @namespace    http://tampermonkey.net/
// @version      2025-02-03
// @description  Assign photographer to lead and update event details
// @author       You
// @match        https://www.pixifi.com/admin/leads/*/
// @icon         https://www.google.com/s2/favicons?sz=64&domain=pixifi.com
// @grant        none
// ==/UserScript==

(function() {
    'use strict';

    // --------------------------------------------------------------------------
    // Global Variables / Setup
    // --------------------------------------------------------------------------
    const leadID = getObjectID();
    const clientID = "12295";  // Your client ID

    // --------------------------------------------------------------------------
    // Existing & Simplified Functions
    // --------------------------------------------------------------------------

    // Assign staff (photographer) to the lead.
    async function assignStaffToLead(clientID, leadID, staffID, roleID) {
        const bodyData = new URLSearchParams({
            clientID: clientID,
            leadID: leadID,
            staffID: staffID,
            roleID: roleID
        });

        try {
            const response = await fetch("https://www.pixifi.com/admin/fn/leads/assignStaffToLead/", {
                method: "POST",
                headers: {
                    "Content-Type": "application/x-www-form-urlencoded; charset=UTF-8",
                    "X-Requested-With": "XMLHttpRequest"
                },
                body: bodyData.toString(),
                credentials: "include"
            });
            if (response.ok) {
                console.log("Staff successfully assigned to lead.");
            } else {
                console.error("Failed to assign staff to lead:", response.statusText);
            }
        } catch (error) {
            console.error("Error attempting to assign staff to lead:", error);
        }
    }

    // Refresh the lead's staff listing.
    async function refreshLeadStaffListing(clientID, leadID) {
        const bodyData = new URLSearchParams({
            clientID: clientID,
            leadID: leadID
        });

        try {
            const response = await fetch("https://www.pixifi.com/admin/fn/leads/refreshLeadStaffListing/", {
                method: "POST",
                headers: {
                    "Content-Type": "application/x-www-form-urlencoded; charset=UTF-8",
                    "X-Requested-With": "XMLHttpRequest"
                },
                body: bodyData.toString(),
                credentials: "include"
            });

            if (response.ok) {
                const text = await response.text();
                const [status, html] = text.split("{|}");
                if (status === "SUCCESS") {
                    const staffListingElement = document.getElementById("staffListing");
                    if (staffListingElement) {
                        staffListingElement.innerHTML = html;
                        console.log("Lead staff listing successfully refreshed.");
                    } else {
                        console.error("Staff listing element not found.");
                    }
                } else {
                    console.error("Failed to refresh lead staff listing: unexpected response format.");
                }
            } else {
                console.error("Failed to refresh lead staff listing:", response.statusText);
            }
        } catch (error) {
            console.error("Error attempting to refresh lead staff listing:", error);
        }
    }

    // --------------------------------------------------------------------------
    // Update the Event Name by appending timestamp info, only if no similar timestamp exists.
    // --------------------------------------------------------------------------
    async function updateEventName(newAddition) {
        console.log("Attempting to update event name, checking for existing timestamp signature...");
        const eventNameElement = document.getElementById("af_leadCustomEventName");
        if (!eventNameElement) {
            console.error("Could not find the event name element.");
            return;
        }

        let currentEventName = eventNameElement.getAttribute("data-value") || eventNameElement.textContent.trim();
        if (currentEventName === "Empty") {
            currentEventName = "";
        }

        // Regex to find a timestamp like "MM/DD FUT AM/PM SH" or "MM/DD AM/PM SH" anywhere in the string
        // Uses word boundaries (\b) to avoid matching parts of other words. Case-insensitive (i).
        const timestampRegex = /\b\d{2}\/\d{2}(?: FUT)? (?:AM|PM) SH\b/i;
        const match = currentEventName.match(timestampRegex);

        let finalEventName;
        let needsUpdate = false;

        if (match) {
            // If any timestamp pattern is found anywhere, do not update.
            console.log(`Existing timestamp signature found: "${match[0]}". No update needed for event name.`);
            needsUpdate = false;
            finalEventName = currentEventName; // Keep original name
        } else {
            // No timestamp pattern found, proceed with appending.
            console.log("No existing timestamp signature found. Appending new addition:", newAddition);
            finalEventName = (currentEventName + " " + newAddition).trim();
            needsUpdate = true;
        }

        if (!needsUpdate) {
            return; // Exit if no update is required
        }

        console.log("Final event name will be:", finalEventName);

        // Update the event name on the page via the editable plugin.
        $('#af_leadCustomEventName').data('editable').setValue(finalEventName);
        eventNameElement.textContent = finalEventName;

        // Prepare the data for the back end update.
        const bodyData = new URLSearchParams({
            name: "af_leadCustomEventName",
            value: finalEventName,
            pk: "",
            clientID: clientID,
            objectID: leadID
        });

        try {
            const response = await fetch("https://www.pixifi.com/admin/data/af/leaddata/", {
                method: "POST",
                headers: {
                    "Content-Type": "application/x-www-form-urlencoded; charset=UTF-8",
                    "X-Requested-With": "XMLHttpRequest"
                },
                body: bodyData.toString(),
                credentials: "include"
            });
            if (response.ok) {
                console.log("Event name successfully updated to:", finalEventName);
            } else {
                console.error("Failed to update event name:", response.statusText);
            }
        } catch (error) {
            console.error("Error attempting to update event name:", error);
        }
    }

    // --------------------------------------------------------------------------
    // Generic function to update any lead field on the server.
    // --------------------------------------------------------------------------
    async function updateLeadField(fieldName, value, arrayoption) {
        const keyName = `value[${arrayoption}]`;
        console.log(`Updating ${fieldName} to:`, value);
        const bodyData = new URLSearchParams({
            name: fieldName,
            [keyName]: value,
            pk: "",
            clientID: clientID,
            objectID: leadID
        });

        try {
            const response = await fetch("https://www.pixifi.com/admin/data/af/leaddata/", {
                method: "POST",
                headers: {
                    "Content-Type": "application/x-www-form-urlencoded; charset=UTF-8",
                    "X-Requested-With": "XMLHttpRequest"
                },
                body: bodyData.toString(),
                credentials: "include"
            });
            if (response.ok) {
                console.log(`${fieldName} successfully updated.`);
            } else {
                console.error(`Failed to update ${fieldName}:`, response.statusText);
            }
        } catch (error) {
            console.error(`Error updating ${fieldName}:`, error);
        }
    }

    // --------------------------------------------------------------------------
    // Helper: Format time for DOM display
    // Converts a 24-hour "HH:MM" string to "H:MM:AM/PM"
    // --------------------------------------------------------------------------
    function formatTimeForDOM(timeStr) {
        let [hourStr, minuteStr] = timeStr.split(":");
        let hour = parseInt(hourStr, 10);
        let period = hour >= 12 ? "PM" : "AM";
        if (hour === 0) {
            hour = 12;
        } else if (hour > 12) {
            hour = hour - 12;
        }
        return `${hour}:${minuteStr}:${period}`;
    }

    // --------------------------------------------------------------------------
    // Update local DOM elements for Event Date and Event Start Time
    // --------------------------------------------------------------------------
    function updateLocalEventDate(newEventDate) {
        console.log("Updating local event date to:", newEventDate);
        const eventDateElement = document.getElementById("af_leadEventDate");
        if (!eventDateElement) {
            console.error("Could not find the event date element.");
            return;
        }
        // Update via the editable plugin...
        $('#af_leadEventDate').data('editable').setValue(newEventDate);
        // ...and update the element's text content directly.
        eventDateElement.textContent = newEventDate;
    }

    function updateLocalEventTimeStart(newStartTime) {
        const formattedTime = formatTimeForDOM(newStartTime);
        console.log("Updating local event start time to:", formattedTime);
        const eventTimeElement = document.getElementById("af_leadEventTimeStart");
        if (!eventTimeElement) {
            console.error("Could not find the event start time element.");
            return;
        }
        // Update via the editable plugin...
        $('#af_leadEventTimeStart').data('editable').setValue(formattedTime);
        // ...and update the element's text content directly.
        eventTimeElement.textContent = formattedTime;
    }

    // --------------------------------------------------------------------------
    // Utility: Extract leadID from the URL.
    // --------------------------------------------------------------------------
    function getObjectID() {
        const match = window.location.href.match(/leads\/(\d+)/);
        return match ? match[1] : null;
    }

    // --------------------------------------------------------------------------
    // Check if a photographer is assigned and return their ID if found.
    // Returns the staff ID (string) or null if no staff is assigned or ID can't be found.
    // --------------------------------------------------------------------------
    function getAssignedPhotographerID() {
        const staffListingElement = document.getElementById("staffListing");
        if (!staffListingElement) {
            console.warn("Staff listing element (#staffListing) not found. Assuming no photographer is assigned.");
            return null;
        }

        // --- Attempt to find the staff ID --- 
        // This is an assumption. Adjust the selector based on the actual HTML structure within #staffListing.
        // Assumption 1: The ID is in a 'data-staffid' attribute of the first element inside.
        const staffElement = staffListingElement.querySelector('[data-staffid]');
        if (staffElement && staffElement.dataset.staffid) {
            const staffId = staffElement.dataset.staffid;
            console.log("Found assigned staff ID via data-staffid:", staffId);
            return staffId;
        }

        // Assumption 2: Maybe it's in a link's href like '/admin/staff/12345/'
        const staffLink = staffListingElement.querySelector('a[href*="/admin/staff/"]');
        if (staffLink) {
            const match = staffLink.href.match(/\/staff\/(\d+)/);
            if (match && match[1]) {
                const staffId = match[1];
                console.log("Found assigned staff ID via href:", staffId);
                return staffId;
            }
        }
        
        // Assumption 3: Check for common placeholder text indicating no staff.
        const listingContent = staffListingElement.textContent.trim();
        const isEmpty = listingContent === "" || listingContent.includes("No staff assigned"); // Adjust as needed
        if (isEmpty) {
             console.log("Staff listing appears empty or indicates no staff assigned.");
             return null;
        } 
        
        // If we reached here, staff seems assigned, but we couldn't find the ID based on current assumptions.
        console.warn("Staff listing is present but could not extract staff ID. Check DOM structure and update script logic.");
        // Decide how to handle this: return null (safer) or maybe a placeholder indicating 'unknown'? Returning null.
        return null; 
    }

    // --------------------------------------------------------------------------
    // Main Handler: Process Clipboard Data & Update the Lead
    // --------------------------------------------------------------------------
    async function handlePhotographerAssignment() {
        // Disable button to prevent double clicks during processing
        btn.disabled = true;
        try {
            // --- Read and parse clipboard data first ---
            const clipboardText = await navigator.clipboard.readText();
            console.log("Clipboard text:", clipboardText);
            const parts = clipboardText.split(",");
            if (parts.length < 5) {
                console.error("Clipboard data is incomplete. Expected format: FirstName,LastName,StartTime,EventDate,PhotographerID");
                alert("Clipboard error: Data is incomplete. Check format.");
                return;
            }
            const [firstName, lastName, startTime, eventDate, clipboardPhotographerID] = parts.map(item => item.trim());
            console.log("Parsed clipboard data:", { firstName, lastName, startTime, eventDate, clipboardPhotographerID });

            // --- Check current assignment status ---
            const currentPhotographerID = getAssignedPhotographerID();
            console.log("Current assigned photographer ID:", currentPhotographerID);

            // --- Decide action based on assignment status ---
            let performStaffAssignment = false;

            if (currentPhotographerID === null) {
                // Case 1: No one assigned -> Proceed with full assignment
                console.log("No photographer currently assigned. Proceeding with full assignment.");
                performStaffAssignment = true;
            } else {
                // Case 2: Someone is assigned
                if (currentPhotographerID === clipboardPhotographerID) {
                    // Case 2a: Same photographer -> Update details only
                    console.log("Clipboard photographer matches assigned photographer. Updating event details only.");
                    performStaffAssignment = false;
                } else {
                    // Case 2b: Different photographer -> Error and abort
                    console.error(`Cannot assign photographer ID ${clipboardPhotographerID}. Photographer ID ${currentPhotographerID} is already assigned. Please reassign manually.`);
                    alert(`Action aborted: A different photographer (ID: ${currentPhotographerID}) is already assigned. Please reassign manually if needed.`);
                    return; // Stop execution
                }
            }

            // --- Construct the Event Name addition (always needed if we proceed) ---
            const now = new Date();
            const mm = String(now.getMonth() + 1).padStart(2, '0');
            const dd = String(now.getDate()).padStart(2, '0');
            const currentHour = now.getHours();
            const period = currentHour >= 12 ? "PM" : "AM";
            const eventNameAddition = `${mm}/${dd} FUT ${period} SH`;
            console.log("Event name addition/update value:", eventNameAddition);

            // --- Update the Lead Data (Event Name, Date, Time) ---
            // This happens whether assigning new or just updating details for existing.
            await updateEventName(eventNameAddition);
            await updateLeadField('af_leadEventDate', eventDate, 'date');
            await updateLeadField('af_leadEventTimeStart', formatTimeForDOM(startTime), 'time');
            updateLocalEventDate(eventDate);
            updateLocalEventTimeStart(startTime);

            // --- Perform Staff Assignment (only if needed) ---
            if (performStaffAssignment) {
                console.log("Performing staff assignment...");
                const PHOTOGRAPHER_ROLE_ID = "444"; // Ensure this is correct
                await assignStaffToLead(clientID, leadID, clipboardPhotographerID, PHOTOGRAPHER_ROLE_ID);
                await refreshLeadStaffListing(clientID, leadID);
                console.log("Staff assignment and refresh completed.");
            } else {
                console.log("Skipping staff assignment and refresh.");
            }

            console.log("Photographer assignment process finished.");

        } catch (error) {
            console.error("Error handling photographer assignment:", error);
            alert("An error occurred during the assignment process. Check console logs.");
        } finally {
            // Ensure the button is re-enabled whether success or failure
            btn.disabled = false;
        }
    }

    // --------------------------------------------------------------------------
    // UI: Add a Button to Trigger the Process
    // --------------------------------------------------------------------------
    const btn = document.createElement("button");
    btn.textContent = "Assign Photographer";
    btn.style.position = "fixed";
    btn.style.top = "10px";
    btn.style.right = "10px";
    btn.style.zIndex = "9999";
    btn.addEventListener("click", handlePhotographerAssignment);
    document.body.appendChild(btn);

})();
